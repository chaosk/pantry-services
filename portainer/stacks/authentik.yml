services:
  authentik:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik
    command: server
    environment:
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=db
      - AUTHENTIK_POSTGRESQL__USER=${AUTHENTIK_DB_USER}
      - AUTHENTIK_POSTGRESQL__NAME=${AUTHENTIK_DB}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_DB_PASS}
      - AUTHENTIK_AUTHENTIK__GEOIP=/geoip/GeoLite2-City.mmdb
      - AUTHENTIK_ERROR_REPORTING__ENABLED=false
      - AUTHENTIK_DISABLE_STARTUP_ANALYTICS=true
      # AUTHENTIK_LOG_LEVEL: trace # If a specific log level is needed
      - AUTHENTIK_HOST=https://auth.${DOMAIN_NAME}
      - AUTHENTIK_HOST_BROWSER=https://auth.${DOMAIN_NAME}
      # AUTHENTIK_INSECURE: "true"
    volumes:
      - ${DATA_DIR}/authentik/media:/media
      - ${DATA_DIR}/authentik/custom-templates:/templates
      - ${DATA_DIR}/authentik/geoip:/geoip
    env_file:
      - /defaults.env
      - ../../stack.env
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      # This one might require an additional CNAME mapping to your domain name (if using OVH)
      - "traefik.http.routers.authentik.rule=Host(`auth.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) || HostRegexp(`{subdomain:[a-z0-9]+}.${DOMAIN_NAME}`)) && PathPrefix(`/outpost.goauthentik.io/`)"
      - "traefik.http.routers.authentik.entrypoints=websecure"
      - "traefik.http.routers.authentik.tls=true"
      # - "traefik.http.routers.authentik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.authentik.service=authentik-svc"
      - "traefik.http.routers.authentik.middlewares=chain-noauth@docker"
      # Service
      - "traefik.http.services.authentik-svc.loadbalancer.server.port=9000"
    ports:
      - 9080:9000
    depends_on:
      - db
      - redis
    networks:
      - synobridge
      - traefik
      - default
    restart: unless-stopped
  worker:
    image: ghcr.io/goauthentik/server:latest
    command: worker
    environment:
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=db
      - AUTHENTIK_POSTGRESQL__USER=${AUTHENTIK_DB_USER}
      - AUTHENTIK_POSTGRESQL__NAME=${AUTHENTIK_DB}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_DB_PASS}
      - AUTHENTIK_AUTHENTIK__GEOIP=/geoip/GeoLite2-City.mmdb
      - AUTHENTIK_ERROR_REPORTING__ENABLED=false
      - AUTHENTIK_DISABLE_STARTUP_ANALYTICS=true
    user: root
    volumes:
      - ${DATA_DIR}/authentik/media:/media
      - ${DATA_DIR}/authentik/certs:/certs
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATA_DIR}/authentik/custom-templates:/templates
      - ${DATA_DIR}/authentik/geoip:/geoip
    env_file:
      - /defaults.env
      - ../../stack.env
    depends_on:
      - db
      - redis
    restart: unless-stopped
  db:
    image: docker.io/library/postgres:15
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${AUTHENTIK_DB_PASS}
      - POSTGRES_USER=${AUTHENTIK_DB_USER}
      - POSTGRES_DB=${AUTHENTIK_DB}
    env_file:
      - ../../stack.env
  redis:
    image: docker.io/library/redis:7
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redisdata:/data
    restart: unless-stopped
  geoip:
    image: maxmindinc/geoipupdate:latest
    volumes:
      - ${DATA_DIR}/authentik/geoip:/usr/share/GeoIP
    environment:
      - GEOIPUPDATE_EDITION_IDS=GeoLite2-City
      - GEOIPUPDATE_FREQUENCY=8
    env_file:
      - ../../stack.env
volumes:
  pgdata:
  redisdata:
networks:
  synobridge:
    external: true
  traefik:
    external: true
  default: